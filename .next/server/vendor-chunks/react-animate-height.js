"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-animate-height";
exports.ids = ["vendor-chunks/react-animate-height"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-animate-height/dist/esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-animate-height/dist/esm/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n// ------------------ Helpers\nfunction isNumber(n) {\n    const number = parseFloat(n);\n    return !isNaN(number) && isFinite(number);\n}\nfunction isPercentage(height) {\n    // Percentage height\n    return typeof height === \"string\" && height[height.length - 1] === \"%\" && isNumber(height.substring(0, height.length - 1));\n}\nfunction hideContent(element, height, disableDisplayNone) {\n    // Check for element?.style is added cause this would fail in tests (react-test-renderer)\n    // Read more here: https://github.com/Stanko/react-animate-height/issues/17\n    if (height === 0 && !disableDisplayNone && (element === null || element === void 0 ? void 0 : element.style) && (element === null || element === void 0 ? void 0 : element.children.length) > 0) {\n        element.style.display = \"none\";\n    }\n}\nfunction showContent(element, height) {\n    // Check for element?.style is added cause this would fail in tests (react-test-renderer)\n    // Read more here: https://github.com/Stanko/react-animate-height/issues/17\n    if (height === 0 && (element === null || element === void 0 ? void 0 : element.style)) {\n        element.style.display = \"\";\n    }\n}\nconst ANIMATION_STATE_CLASSES = {\n    animating: \"rah-animating\",\n    animatingUp: \"rah-animating--up\",\n    animatingDown: \"rah-animating--down\",\n    animatingToHeightZero: \"rah-animating--to-height-zero\",\n    animatingToHeightAuto: \"rah-animating--to-height-auto\",\n    animatingToHeightSpecific: \"rah-animating--to-height-specific\",\n    static: \"rah-static\",\n    staticHeightZero: \"rah-static--height-zero\",\n    staticHeightAuto: \"rah-static--height-auto\",\n    staticHeightSpecific: \"rah-static--height-specific\"\n};\nfunction getStaticStateClasses(animationStateClasses, height) {\n    return [\n        animationStateClasses.static,\n        height === 0 && animationStateClasses.staticHeightZero,\n        typeof height === \"number\" && height > 0 ? animationStateClasses.staticHeightSpecific : null,\n        height === \"auto\" && animationStateClasses.staticHeightAuto\n    ].filter((v)=>v).join(\" \");\n}\n// ------------------ Component\nconst propsToOmitFromDiv = [\n    \"animateOpacity\",\n    \"animationStateClasses\",\n    \"applyInlineTransitions\",\n    \"children\",\n    \"className\",\n    \"contentClassName\",\n    \"contentRef\",\n    \"delay\",\n    \"duration\",\n    \"easing\",\n    \"height\",\n    \"onHeightAnimationEnd\",\n    \"onHeightAnimationStart\",\n    \"style\",\n    \"disableDisplayNone\"\n];\nconst AnimateHeight = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((componentProps, ref)=>{\n    // const AnimateHeight = forwardRef((componentProps: AnimateHeightProps, ref) => {\n    // const AnimateHeight: React.FC<AnimateHeightProps> = (componentProps) => {\n    const { animateOpacity = false, animationStateClasses = {}, applyInlineTransitions = true, children, className = \"\", contentClassName, delay: userDelay = 0, disableDisplayNone = false, duration: userDuration = 500, easing = \"ease\", height, onHeightAnimationEnd, onHeightAnimationStart, style, contentRef } = componentProps;\n    const divProps = Object.assign({}, componentProps);\n    propsToOmitFromDiv.forEach((propKey)=>{\n        delete divProps[propKey];\n    });\n    // ------------------ Initialization\n    const prevHeight = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(height);\n    const contentElement = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const animationClassesTimeoutID = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const timeoutID = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const stateClasses = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(Object.assign(Object.assign({}, ANIMATION_STATE_CLASSES), animationStateClasses));\n    const isBrowser = \"undefined\" !== \"undefined\";\n    const prefersReducedMotion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(isBrowser && window.matchMedia ? window.matchMedia(\"(prefers-reduced-motion)\").matches : false);\n    const delay = prefersReducedMotion.current ? 0 : userDelay;\n    const duration = prefersReducedMotion.current ? 0 : userDuration;\n    let initHeight = height;\n    let initOverflow = \"visible\";\n    if (typeof height === \"number\") {\n        // Reset negative height to 0\n        initHeight = height < 0 ? 0 : height;\n        initOverflow = \"hidden\";\n    } else if (isPercentage(initHeight)) {\n        // If value is string \"0%\" make sure we convert it to number 0\n        initHeight = height === \"0%\" ? 0 : height;\n        initOverflow = \"hidden\";\n    }\n    const [currentHeight, setCurrentHeight] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initHeight);\n    const [overflow, setOverflow] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initOverflow);\n    const [useTransitions, setUseTransitions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [animationStateClassNames, setAnimationStateClassNames] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getStaticStateClasses(stateClasses.current, height));\n    // ------------------ Did mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Hide content if height is 0 (to prevent tabbing into it)\n        hideContent(contentElement.current, currentHeight, disableDisplayNone);\n    // This should be explicitly run only on mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    // ------------------ Height update\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (height !== prevHeight.current && contentElement.current) {\n            showContent(contentElement.current, prevHeight.current);\n            // Cache content height\n            contentElement.current.style.overflow = \"hidden\";\n            const contentHeight = contentElement.current.offsetHeight;\n            contentElement.current.style.overflow = \"\";\n            // set total animation time\n            const totalDuration = duration + delay;\n            let newHeight;\n            let timeoutHeight;\n            let timeoutOverflow = \"hidden\";\n            let timeoutUseTransitions;\n            const isCurrentHeightAuto = prevHeight.current === \"auto\";\n            if (typeof height === \"number\") {\n                // Reset negative height to 0\n                newHeight = height < 0 ? 0 : height;\n                timeoutHeight = newHeight;\n            } else if (isPercentage(height)) {\n                // If value is string \"0%\" make sure we convert it to number 0\n                newHeight = height === \"0%\" ? 0 : height;\n                timeoutHeight = newHeight;\n            } else {\n                // If not, animate to content height\n                // and then reset to auto\n                newHeight = contentHeight; // TODO solve contentHeight = 0\n                timeoutHeight = \"auto\";\n                timeoutOverflow = undefined;\n            }\n            if (isCurrentHeightAuto) {\n                // This is the height to be animated to\n                timeoutHeight = newHeight;\n                // If previous height was 'auto'\n                // set starting height explicitly to be able to use transition\n                newHeight = contentHeight;\n            }\n            // Animation classes\n            const newAnimationStateClassNames = [\n                stateClasses.current.animating,\n                (prevHeight.current === \"auto\" || height < prevHeight.current) && stateClasses.current.animatingUp,\n                (height === \"auto\" || height > prevHeight.current) && stateClasses.current.animatingDown,\n                timeoutHeight === 0 && stateClasses.current.animatingToHeightZero,\n                timeoutHeight === \"auto\" && stateClasses.current.animatingToHeightAuto,\n                typeof timeoutHeight === \"number\" && timeoutHeight > 0 ? stateClasses.current.animatingToHeightSpecific : null\n            ].filter((v)=>v).join(\" \");\n            // Animation classes to be put after animation is complete\n            const timeoutAnimationStateClasses = getStaticStateClasses(stateClasses.current, timeoutHeight);\n            // Set starting height and animating classes\n            // When animating from 'auto' we first need to set fixed height\n            // that change should be animated\n            setCurrentHeight(newHeight);\n            setOverflow(\"hidden\");\n            setUseTransitions(!isCurrentHeightAuto);\n            setAnimationStateClassNames(newAnimationStateClassNames);\n            // Clear timeouts\n            clearTimeout(timeoutID.current);\n            clearTimeout(animationClassesTimeoutID.current);\n            if (isCurrentHeightAuto) {\n                // When animating from 'auto' we use a short timeout to start animation\n                // after setting fixed height above\n                timeoutUseTransitions = true;\n                // Short timeout to allow rendering of the initial animation state first\n                timeoutID.current = setTimeout(()=>{\n                    setCurrentHeight(timeoutHeight);\n                    setOverflow(timeoutOverflow);\n                    setUseTransitions(timeoutUseTransitions);\n                    // ANIMATION STARTS, run a callback if it exists\n                    onHeightAnimationStart === null || onHeightAnimationStart === void 0 ? void 0 : onHeightAnimationStart(timeoutHeight);\n                }, 50);\n                // Set static classes and remove transitions when animation ends\n                animationClassesTimeoutID.current = setTimeout(()=>{\n                    setUseTransitions(false);\n                    setAnimationStateClassNames(timeoutAnimationStateClasses);\n                    // ANIMATION ENDS\n                    // Hide content if height is 0 (to prevent tabbing into it)\n                    hideContent(contentElement.current, timeoutHeight, disableDisplayNone);\n                    // Run a callback if it exists\n                    onHeightAnimationEnd === null || onHeightAnimationEnd === void 0 ? void 0 : onHeightAnimationEnd(timeoutHeight);\n                }, totalDuration);\n            } else {\n                // ANIMATION STARTS, run a callback if it exists\n                onHeightAnimationStart === null || onHeightAnimationStart === void 0 ? void 0 : onHeightAnimationStart(newHeight);\n                // Set end height, classes and remove transitions when animation is complete\n                timeoutID.current = setTimeout(()=>{\n                    setCurrentHeight(timeoutHeight);\n                    setOverflow(timeoutOverflow);\n                    setUseTransitions(false);\n                    setAnimationStateClassNames(timeoutAnimationStateClasses);\n                    // ANIMATION ENDS\n                    // If height is auto, don't hide the content\n                    // (case when element is empty, therefore height is 0)\n                    if (height !== \"auto\") {\n                        // Hide content if height is 0 (to prevent tabbing into it)\n                        hideContent(contentElement.current, newHeight, disableDisplayNone); // TODO solve newHeight = 0\n                    }\n                    // Run a callback if it exists\n                    onHeightAnimationEnd === null || onHeightAnimationEnd === void 0 ? void 0 : onHeightAnimationEnd(newHeight);\n                }, totalDuration);\n            }\n        }\n        prevHeight.current = height;\n        return ()=>{\n            clearTimeout(timeoutID.current);\n            clearTimeout(animationClassesTimeoutID.current);\n        };\n    // This should be explicitly run only on height change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        height\n    ]);\n    // ------------------ Render\n    const componentStyle = Object.assign(Object.assign({}, style), {\n        height: currentHeight,\n        overflow: overflow || (style === null || style === void 0 ? void 0 : style.overflow)\n    });\n    if (useTransitions && applyInlineTransitions) {\n        componentStyle.transition = `height ${duration}ms ${easing} ${delay}ms`;\n        // Include transition passed through styles\n        if (style === null || style === void 0 ? void 0 : style.transition) {\n            componentStyle.transition = `${style.transition}, ${componentStyle.transition}`;\n        }\n        // Add webkit vendor prefix still used by opera, blackberry...\n        componentStyle.WebkitTransition = componentStyle.transition;\n    }\n    const contentStyle = {};\n    if (animateOpacity) {\n        contentStyle.transition = `opacity ${duration}ms ${easing} ${delay}ms`;\n        // Add webkit vendor prefix still used by opera, blackberry...\n        contentStyle.WebkitTransition = contentStyle.transition;\n        if (currentHeight === 0) {\n            contentStyle.opacity = 0;\n        }\n    }\n    // Check if user passed aria-hidden prop\n    const hasAriaHiddenProp = typeof divProps[\"aria-hidden\"] !== \"undefined\";\n    const ariaHidden = hasAriaHiddenProp ? divProps[\"aria-hidden\"] : height === 0;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", Object.assign({}, divProps, {\n        \"aria-hidden\": ariaHidden,\n        className: `${animationStateClassNames} ${className}`,\n        style: componentStyle,\n        ref: ref\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: contentClassName,\n        style: contentStyle,\n        ref: (el)=>{\n            contentElement.current = el;\n            if (contentRef) {\n                contentRef.current = el;\n            }\n        }\n    }, children));\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AnimateHeight);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-animate-height/dist/esm/index.js\n");

/***/ })

};
;